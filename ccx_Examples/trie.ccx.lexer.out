module (keyword)
trie (identifier)
is (keyword)
Num_Branches (identifier)
: (operator)
constant (keyword)
positive (keyword)
:= (operator)
27 (numeric literal)
; (operator)
type (keyword)
node_type (identifier)
is (keyword)
( (operator)
Nt_Branch (identifier)
, (operator)
Nt_Data (identifier)
) (operator)
; (operator)
type (keyword)
trie_type (identifier)
is (keyword)
struct (keyword)
root (identifier)
: (operator)
ptr_type (identifier)
:= (operator)
null (keyword)
; (operator)
size (identifier)
: (operator)
natural (keyword)
:= (operator)
0 (numeric literal)
; (operator)
end (keyword)
struct (keyword)
; (operator)
type (keyword)
datanode_type (identifier)
is (keyword)
struct (keyword)
kind (identifier)
: (operator)
node_type (identifier)
:= (operator)
Nt_Data (identifier)
; (operator)
key (identifier)
: (operator)
trie_key_type (identifier)
:= (operator)
"dfltkeyval" (string)
; (operator)
cargo (identifier)
: (operator)
ptr_type (identifier)
:= (operator)
null (keyword)
; (operator)
end (keyword)
struct (keyword)
; (operator)
type (keyword)
branchnode_type (identifier)
is (keyword)
struct (keyword)
kind (identifier)
: (operator)
node_type (identifier)
:= (operator)
Nt_Branch (identifier)
; (operator)
branches (identifier)
: (operator)
ptr_type (identifier)
( (operator)
1.. (numeric literal)
NumBranches (identifier)
) (operator)
; (operator)
end (keyword)
struct (keyword)
; (operator)
procedure (keyword)
make_uppercase (identifier)
( (operator)
key (identifier)
: (operator)
in (keyword)
out (keyword)
trie_key_type (identifier)
) (operator)
is (keyword)
i (identifier)
: (operator)
positive (keyword)
:= (operator)
1 (numeric literal)
; (operator)
begin (keyword)
while (keyword)
( (operator)
i (identifier)
<= (operator)
key (identifier)
. (operator)
length (identifier)
( (operator)
) (operator)
) (operator)
loop (keyword)
if (keyword)
( (operator)
( (operator)
key (identifier)
[ (operator)
i (identifier)
] (operator)
>= (operator)
'a' (character literal)
) (operator)
and (keyword)
( (operator)
key (identifier)
[ (operator)
i (identifier)
] (operator)
<= (operator)
'z' (character literal)
) (operator)
) (operator)
then (keyword)
key (identifier)
[ (operator)
i (identifier)
] (operator)
:= (operator)
'A' (character literal)
+ (operator)
( (operator)
key (identifier)
[ (operator)
i (identifier)
] (operator)
- (operator)
'a' (character literal)
) (operator)
; (operator)
end (keyword)
if (keyword)
; (operator)
i (identifier)
:= (operator)
i (identifier)
+ (operator)
1 (numeric literal)
; (operator)
end (keyword)
loop (keyword)
; (operator)
end (keyword)
make_uppercase (identifier)
; (operator)
function (keyword)
lkup (identifier)
( (operator)
p (identifier)
: (operator)
in (keyword)
out (keyword)
ptr_type (identifier)
; (operator)
k (identifier)
: (operator)
trie_key_type (identifier)
) (operator)
return (keyword)
datanode_type (identifier)
is (keyword)
i (identifier)
: (operator)
integer (keyword)
; (operator)
n (identifier)
: (operator)
integer (keyword)
; (operator)
c (identifier)
: (operator)
character (keyword)
; (operator)
dp (identifier)
: (operator)
datanode_type (identifier)
; (operator)
bp (identifier)
: (operator)
branchnode_type (identifier)
; (operator)
begin (keyword)
i (identifier)
:= (operator)
0 (numeric literal)
; (operator)
dp (identifier)
:= (operator)
p (identifier)
; (operator)
bp (identifier)
:= (operator)
p (identifier)
; (operator)
<< (operator)
/**/ (comment)
L_Discriminant_Test (identifier)
/**/ (comment)
>> (operator)
while (keyword)
( (operator)
( (operator)
p (identifier)
!= (operator)
null (keyword)
) (operator)
and (keyword)
( (operator)
bp (identifier)
. (operator)
kind (identifier)
= (operator)
Nt_Branch (identifier)
) (operator)
) (operator)
loop (keyword)
c (identifier)
:= (operator)
k (identifier)
[ (operator)
i (identifier)
] (operator)
; (operator)
i (identifier)
:= (operator)
i (identifier)
+ (operator)
1 (numeric literal)
; (operator)
if (keyword)
( (operator)
c (identifier)
> (operator)
0 (numeric literal)
) (operator)
then (keyword)
n (identifier)
:= (operator)
c (identifier)
- (operator)
'A' (character literal)
+ (operator)
1 (numeric literal)
; (operator)
else (keyword)
n (identifier)
:= (operator)
0 (numeric literal)
; (operator)
end (keyword)
if (keyword)
; (operator)
p (identifier)
:= (operator)
bp (identifier)
. (operator)
branches (identifier)
[ (operator)
k (identifier)
] (operator)
; (operator)
<< (operator)
L_Discriminant_Assign (identifier)
>> (operator)
<< (operator)
L_Discriminant_Rhs (identifier)
>> (operator)
bp (identifier)
:= (operator)
p (identifier)
; (operator)
end (keyword)
loop (keyword)
; (operator)
dp (identifier)
:= (operator)
p (identifier)
; (operator)
if (keyword)
( (operator)
dp (identifier)
= (operator)
null (keyword)
) (operator)
then (keyword)
return (keyword)
null (keyword)
; (operator)
elsif (keyword)
( (operator)
key (identifier)
= (operator)
dp (identifier)
. (operator)
key (identifier)
) (operator)
then (keyword)
return (keyword)
dp (identifier)
; (operator)
else (keyword)
return (keyword)
null (keyword)
; (operator)
end (keyword)
if (keyword)
; (operator)
end (keyword)
lkup (identifier)
; (operator)
procedure (keyword)
insert_key_data_pair (identifier)
( (operator)
p (identifier)
: (operator)
in (keyword)
out (keyword)
ptr_type (identifier)
; (operator)
key (identifier)
: (operator)
in (keyword)
trie_key_type (identifier)
; (operator)
cargo (identifier)
: (operator)
ptr_type (identifier)
; (operator)
i (identifier)
: (operator)
natural (keyword)
; (operator)
was_added (identifier)
: (operator)
boolean (identifier)
) (operator)
is (keyword)
k (identifier)
, (operator)
k1 (identifier)
: (operator)
integer (keyword)
; (operator)
ch (identifier)
, (operator)
ch1 (identifier)
: (operator)
character (keyword)
; (operator)
dp (identifier)
: (operator)
datanode_type (identifier)
; (operator)
bp (identifier)
: (operator)
branchnode_type (identifier)
; (operator)
bp1 (identifier)
: (operator)
branchnode_type (identifier)
; (operator)
begin (keyword)
while (keyword)
( (operator)
1 (numeric literal)
= (operator)
1 (numeric literal)
) (operator)
loop (keyword)
if (keyword)
( (operator)
p (identifier)
= (operator)
null (keyword)
) (operator)
then (keyword)
p (identifier)
:= (operator)
alloc (identifier)
( (operator)
datanode_type (identifier)
) (operator)
; (operator)
<< (operator)
L_Discriminant_Alloc (identifier)
>> (operator)
p (identifier)
. (operator)
key (identifier)
:= (operator)
key (identifier)
; (operator)
p (identifier)
. (operator)
cargo (identifier)
:= (operator)
cargo (identifier)
; (operator)
break (identifier)
; (operator)
end (keyword)
if (keyword)
; (operator)
bp (identifier)
:= (operator)
p (identifier)
; (operator)
dp (identifier)
:= (operator)
p (identifier)
; (operator)
ch (identifier)
:= (operator)
key (identifier)
[ (operator)
i (identifier)
] (operator)
; (operator)
if (keyword)
( (operator)
ch (identifier)
> (operator)
0 (numeric literal)
) (operator)
then (keyword)
k (identifier)
:= (operator)
ch (identifier)
- (operator)
'A' (character literal)
+ (operator)
1 (numeric literal)
; (operator)
else (keyword)
k (identifier)
:= (operator)
0 (numeric literal)
; (operator)
end (keyword)
if (keyword)
; (operator)
if (keyword)
( (operator)
bp (identifier)
. (operator)
kind (identifier)
= (operator)
Nt_Branch (identifier)
) (operator)
then (keyword)
/* it is a branch node */ (comment)
<< (operator)
L_Discriminant_Assign (identifier)
>> (operator)
p (identifier)
:= (operator)
bp (identifier)
. (operator)
branches (identifier)
[ (operator)
k (identifier)
] (operator)
; (operator)
else (keyword)
/* it is a data node */ (comment)
if (keyword)
( (operator)
key (identifier)
= (operator)
dp (identifier)
. (operator)
key (identifier)
) (operator)
then (keyword)
/*
                     * There is already cargo associated with this key in the
                     * table. There can only be one datum associated with any
                     * given key for the lifetime of this table.
                     */ (comment)
was_added (identifier)
:= (operator)
false (identifier)
; (operator)
break (identifier)
; (operator)
else (keyword)
was_added (identifier)
:= (operator)
true (identifier)
; (operator)
end (keyword)
if (keyword)
; (operator)
bp1 (identifier)
:= (operator)
alloc (identifier)
( (operator)
branchnode_type (identifier)
) (operator)
; (operator)
<< (operator)
L_Discriminant_Assign (identifier)
>> (operator)
p (identifier)
:= (operator)
bp1 (identifier)
; (operator)
ch1 (identifier)
:= (operator)
dp (identifier)
. (operator)
key (identifier)
[ (operator)
i (identifier)
] (operator)
; (operator)
/* char in existing node */ (comment)
if (keyword)
( (operator)
ch1 (identifier)
> (operator)
0 (numeric literal)
) (operator)
then (keyword)
k1 (identifier)
:= (operator)
ch1 (identifier)
- (operator)
'A' (character literal)
+ (operator)
1 (numeric literal)
; (operator)
else (keyword)
k1 (identifier)
:= (operator)
0 (numeric literal)
; (operator)
end (keyword)
if (keyword)
; (operator)
bp1 (identifier)
. (operator)
branches (identifier)
[ (operator)
k1 (identifier)
] (operator)
:= (operator)
bp (identifier)
; (operator)
<< (operator)
L_Discriminant_Transitive_Rhs (identifier)
>> (operator)
<< (operator)
L_Discriminant_Assign (identifier)
>> (operator)
p (identifier)
:= (operator)
bp1 (identifier)
. (operator)
branches (identifier)
[ (operator)
k (identifier)
] (operator)
; (operator)
end (keyword)
if (keyword)
; (operator)
i (identifier)
:= (operator)
i (identifier)
+ (operator)
1 (numeric literal)
; (operator)
end (keyword)
loop (keyword)
; (operator)
end (keyword)
insert_key_data_pair (identifier)
; (operator)
function (keyword)
find (identifier)
( (operator)
t (identifier)
: (operator)
in (keyword)
trie_type (identifier)
; (operator)
key (identifier)
: (operator)
in (keyword)
trie_key_type (identifier)
) (operator)
return (keyword)
ptr_type (identifier)
is (keyword)
np (identifier)
: (operator)
datanode_type (identifier)
; (operator)
begin (keyword)
make_uppercase (identifier)
( (operator)
key (identifier)
) (operator)
; (operator)
np (identifier)
:= (operator)
lkup (identifier)
( (operator)
t (identifier)
. (operator)
root (identifier)
, (operator)
key (identifier)
) (operator)
; (operator)
if (keyword)
( (operator)
np (identifier)
= (operator)
null (keyword)
) (operator)
then (keyword)
return (keyword)
null (keyword)
; (operator)
else (keyword)
return (keyword)
np (identifier)
. (operator)
cargo (identifier)
; (operator)
end (keyword)
if (keyword)
; (operator)
end (keyword)
find (identifier)
; (operator)
mutator (keyword)
insert (identifier)
( (operator)
t (identifier)
: (operator)
in (keyword)
out (keyword)
trie_type (identifier)
; (operator)
k (identifier)
: (operator)
in (keyword)
trie_key_type (identifier)
; (operator)
x (identifier)
: (operator)
in (keyword)
ptr_type (identifier)
) (operator)
is (keyword)
dn (identifier)
: (operator)
datanode_type (identifier)
; (operator)
was_added (identifier)
: (operator)
boolean (identifier)
:= (operator)
false (identifier)
; (operator)
begin (keyword)
make_uppercase (identifier)
( (operator)
k (identifier)
) (operator)
; (operator)
insert_key_data_pair (identifier)
( (operator)
t (identifier)
. (operator)
root (identifier)
, (operator)
k (identifier)
, (operator)
cargo (identifier)
, (operator)
0 (numeric literal)
, (operator)
was_added (identifier)
) (operator)
; (operator)
if (keyword)
( (operator)
was_added (identifier)
) (operator)
then (keyword)
t (identifier)
. (operator)
size (identifier)
:= (operator)
t (identifier)
. (operator)
size (identifier)
+ (operator)
1 (numeric literal)
; (operator)
end (keyword)
if (keyword)
; (operator)
end (keyword)
insert (identifier)
; (operator)
accessor (keyword)
size (identifier)
( (operator)
t (identifier)
: (operator)
in (keyword)
trie_type (identifier)
) (operator)
return (keyword)
natural (keyword)
is (keyword)
begin (keyword)
return (keyword)
t (identifier)
. (operator)
size (identifier)
; (operator)
end (keyword)
size (identifier)
; (operator)
end (keyword)
trie (identifier)
; (operator)
